// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int                  @id @default(autoincrement())
  username      String               @unique
  email         String               @unique
  password_hash String
  role          String
  created_at    DateTime             @default(now())
  feedbacks     EventFeedback[]
  proposals     Proposals[]          @relation("UserProposals")
  notifications CalendarNotifications[]
  auditLogs     AuditLogs[]
  bookings      VenueBookings[]
  reports       Reports[]            @relation("ReporterReports")
  approvals     Approvals[]          @relation("ApproverApprovals")
  clubMembers   ClubMembers[]
}

model UserRoles {
  id          Int      @id @default(autoincrement())
  role_name   String   @unique
  permissions String[] // Array of permissions
}

model Venues {
  id          Int              @id @default(autoincrement())
  name        String
  location    String
  capacity    Int
  description String
  image_url   String?
  bookings    VenueBookings[]
  catalogue   VenueCatalogue[]
  reports     Reports[]
}

model VenueBookings {
  id               Int           @id @default(autoincrement())
  user_id          Int
  venue_id         Int
  event_name       String
  event_description String
  event_date       DateTime
  status           String
  created_at       DateTime      @default(now())
  user             Users         @relation(fields: [user_id], references: [id])
  venue            Venues        @relation(fields: [venue_id], references: [id])
  eventHistory     EventHistory[]
  reports          Reports[]
  eventFeedback    EventFeedback[]
}

model EventFeedback {
  id         Int           @id @default(autoincrement())
  event_id   Int
  user_id    Int
  rating     Int
  comments   String
  created_at DateTime      @default(now())
  event      VenueBookings @relation(fields: [event_id], references: [id])
  user       Users         @relation(fields: [user_id], references: [id])
}

model Proposals {
  id             Int      @id @default(autoincrement())
  proposer_id    Int
  title          String
  description    String
  event_type     String
  requested_date DateTime
  status         String
  created_at     DateTime @default(now())
  proposer       Users    @relation("UserProposals", fields: [proposer_id], references: [id])
}

model Reports {
  id          Int           @id @default(autoincrement())
  reporter_id Int
  report_type String
  content     String
  event_id    Int?
  status      String
  created_at  DateTime      @default(now())
  reporter    Users         @relation("ReporterReports", fields: [reporter_id], references: [id])
  event       VenueBookings? @relation(fields: [event_id], references: [id])
  venue       Venues?       @relation(fields: [venue_id], references: [id])
  venue_id    Int?
  approvals   Approvals[]
}

model Approvals {
  id          Int      @id @default(autoincrement())
  approver_id Int
  entity_type String
  entity_id   Int
  action      String
  remarks     String?
  created_at  DateTime @default(now())
  approver    Users    @relation("ApproverApprovals", fields: [approver_id], references: [id])
  report      Reports? @relation(fields: [entity_id], references: [id])
}

model CalendarNotifications {
  id              Int      @id @default(autoincrement())
  user_id         Int
  event_id        Int
  notification_type String
  sent_at         DateTime
  user            Users    @relation(fields: [user_id], references: [id])
}

model Clubs {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  created_at  DateTime      @default(now())
  members     ClubMembers[]
}

model ClubMembers {
  id        Int      @id @default(autoincrement())
  club_id   Int
  user_id   Int
  role      String
  joined_at DateTime @default(now())
  club      Clubs    @relation(fields: [club_id], references: [id])
  user      Users    @relation(fields: [user_id], references: [id])
}

model VenueCatalogue {
  id               Int     @id @default(autoincrement())
  venue_id         Int
  image_url        String?
  additional_details String?
  venue            Venues  @relation(fields: [venue_id], references: [id])
}

model AuditLogs {
  id          Int      @id @default(autoincrement())
  user_id     Int
  entity_type String
  entity_id   Int
  action      String
  timestamp   DateTime @default(now())
  user        Users    @relation(fields: [user_id], references: [id])
}

model EventHistory {
  id               Int           @id @default(autoincrement())
  venue_booking_id Int
  event_status     String
  feedback         String?
  created_at       DateTime      @default(now())
  venueBooking     VenueBookings @relation(fields: [venue_booking_id], references: [id])
}
